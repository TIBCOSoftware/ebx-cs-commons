/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.onwbp.adaptation.AdaptationValue;
import com.orchestranetworks.service.SessionPermissions;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.IncludedRelation;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.DataTransferObject;
import java.util.List;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.Field;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/IncludedRelation in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class IncludedRelationDAO extends TableDAO<IncludedRelation> {

	private static final IncludedRelationDAO instance = new IncludedRelationDAO();

	public static final Path path_to_field_dto = Path.parse("./dto");
	public static final Path path_to_field_table = Path.parse("./table");
	public static final Path path_to_field_field = Path.parse("./field");
	public static final Path path_to_field_relatedDTO = Path.parse("./relatedDTO");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final IncludedRelation pIncludedRelation) throws EBXCommonsException {
		if(pIncludedRelation.getDto() != null){
			pContext.setValue(DataTransferObjectDAO.getInstance().getRecordPrimaryKey(pIncludedRelation.getDto()),path_to_field_dto);
		}
		if(pIncludedRelation.doesInherit(path_to_field_table)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_table);
		}else{
			if(pIncludedRelation.getTable() != null){
				pContext.setValue(ModelTableDAO.getInstance().getRecordPrimaryKey(pIncludedRelation.getTable()),path_to_field_table);
			}
		}
		if(pIncludedRelation.getField() != null){
			pContext.setValue(FieldDAO.getInstance().getRecordPrimaryKey(pIncludedRelation.getField()),path_to_field_field);
		}
		if(pIncludedRelation.getRelatedDTO() != null){
			pContext.setValue(DataTransferObjectDAO.getInstance().getRecordPrimaryKey(pIncludedRelation.getRelatedDTO()),path_to_field_relatedDTO);
		}
	}

	@Override
	protected void getValuesFromAdaptation(final IncludedRelation pIncludedRelation, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_table))){
			pIncludedRelation.inherit(path_to_field_table);
		}else{
			pIncludedRelation.overwrite(path_to_field_table);
		}
	}

	@Override
	protected void getValuesFromValueContext(final IncludedRelation pIncludedRelation, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_table))){
				pIncludedRelation.inherit(path_to_field_table);
			}else{
				pIncludedRelation.overwrite(path_to_field_table);
			}
		}
	}

	public static IncludedRelationDAO getInstance() {
		return instance;
	}

	@Override
	public IncludedRelation getInstanceOfBean(){
		IncludedRelation instance = new IncludedRelation();
		return instance;
	}

	@Override
	public IncludedRelation getInstanceOfBean(final Adaptation pDataset){
		IncludedRelation instance = new IncludedRelation();
		instance.inherit(path_to_field_table);
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getDto","getField" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(IncludedRelation.class.getMethod("setDto", DataTransferObject.class), Optional.of(DataTransferObject.class)));
			setters.add(new PrimaryKeySetter(IncludedRelation.class.getMethod("setField", Field.class), Optional.of(Field.class)));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getIncludedRelationTable();
	}
}