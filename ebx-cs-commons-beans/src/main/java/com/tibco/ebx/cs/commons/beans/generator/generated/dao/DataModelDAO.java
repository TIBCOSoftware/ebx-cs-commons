/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import java.util.List;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.DataModel;
import com.orchestranetworks.service.SessionPermissions;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;
import java.util.ArrayList;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/DataModel in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class DataModelDAO extends TableDAO<DataModel> {

	private static final DataModelDAO instance = new DataModelDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_moduleName = Path.parse("./moduleName");
	public static final Path path_to_field_schemaLocation = Path.parse("./schemaLocation");
	public static final Path path_to_field_dao = Path.parse("./dao");
	public static final Path path_to_field_beansSourceFolder = Path.parse("./beansSourceFolder");
	public static final Path path_to_field_daoSourceFolder = Path.parse("./daoSourceFolder");
	public static final Path path_to_field_dtoSourceFolder = Path.parse("./dtoSourceFolder");
	public static final Path path_to_field_mappersSourceFolder = Path.parse("./mappersSourceFolder");
	public static final Path path_to_field_servicesSourceFolder = Path.parse("./servicesSourceFolder");
	public static final Path path_to_field_rsSourceFolder = Path.parse("./rsSourceFolder");
	public static final Path path_to_field_beansPackage = Path.parse("./beansPackage");
	public static final Path path_to_field_daoPackage = Path.parse("./daoPackage");
	public static final Path path_to_field_dtoPackage = Path.parse("./dtoPackage");
	public static final Path path_to_field_mappersPackage = Path.parse("./mappersPackage");
	public static final Path path_to_field_servicesPackage = Path.parse("./servicesPackage");
	public static final Path path_to_field_rsPackage = Path.parse("./rsPackage");
	public static final Path path_to_field_tables = Path.parse("./tables");
	public static final Path path_to_field_fields = Path.parse("./fields");
	public static final Path path_to_field_rsServices = Path.parse("./rsServices");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final DataModel pDataModel) throws EBXCommonsException {
		pContext.setValue(pDataModel.getIdentifier(),path_to_field_identifier);
		pContext.setValue(pDataModel.getModuleName(),path_to_field_moduleName);
		pContext.setValue(pDataModel.getSchemaLocation(),path_to_field_schemaLocation);
		if(pDataModel.getDao() != null){
			pContext.setValue(DataAccessObjectDAO.getInstance().getRecordPrimaryKey(pDataModel.getDao()),path_to_field_dao);
		}
		pContext.setValue(pDataModel.getBeansSourceFolder(),path_to_field_beansSourceFolder);
		pContext.setValue(pDataModel.getDaoSourceFolder(),path_to_field_daoSourceFolder);
		pContext.setValue(pDataModel.getDtoSourceFolder(),path_to_field_dtoSourceFolder);
		pContext.setValue(pDataModel.getMappersSourceFolder(),path_to_field_mappersSourceFolder);
		pContext.setValue(pDataModel.getServicesSourceFolder(),path_to_field_servicesSourceFolder);
		pContext.setValue(pDataModel.getRsSourceFolder(),path_to_field_rsSourceFolder);
		pContext.setValue(pDataModel.getBeansPackage(),path_to_field_beansPackage);
		pContext.setValue(pDataModel.getDaoPackage(),path_to_field_daoPackage);
		pContext.setValue(pDataModel.getDtoPackage(),path_to_field_dtoPackage);
		pContext.setValue(pDataModel.getMappersPackage(),path_to_field_mappersPackage);
		pContext.setValue(pDataModel.getServicesPackage(),path_to_field_servicesPackage);
		pContext.setValue(pDataModel.getRsPackage(),path_to_field_rsPackage);
	}

	@Override
	protected void getValuesFromAdaptation(final DataModel pDataModel, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pDataModel.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_moduleName), pRecord).isHidden()){
			pDataModel.setModuleName((String) pRecord.get(path_to_field_moduleName));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_schemaLocation), pRecord).isHidden()){
			pDataModel.setSchemaLocation((String) pRecord.get(path_to_field_schemaLocation));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_beansSourceFolder), pRecord).isHidden()){
			pDataModel.setBeansSourceFolder((String) pRecord.get(path_to_field_beansSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_daoSourceFolder), pRecord).isHidden()){
			pDataModel.setDaoSourceFolder((String) pRecord.get(path_to_field_daoSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_dtoSourceFolder), pRecord).isHidden()){
			pDataModel.setDtoSourceFolder((String) pRecord.get(path_to_field_dtoSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_mappersSourceFolder), pRecord).isHidden()){
			pDataModel.setMappersSourceFolder((String) pRecord.get(path_to_field_mappersSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_servicesSourceFolder), pRecord).isHidden()){
			pDataModel.setServicesSourceFolder((String) pRecord.get(path_to_field_servicesSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_rsSourceFolder), pRecord).isHidden()){
			pDataModel.setRsSourceFolder((String) pRecord.get(path_to_field_rsSourceFolder));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_beansPackage), pRecord).isHidden()){
			pDataModel.setBeansPackage((String) pRecord.get(path_to_field_beansPackage));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_daoPackage), pRecord).isHidden()){
			pDataModel.setDaoPackage((String) pRecord.get(path_to_field_daoPackage));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_dtoPackage), pRecord).isHidden()){
			pDataModel.setDtoPackage((String) pRecord.get(path_to_field_dtoPackage));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_mappersPackage), pRecord).isHidden()){
			pDataModel.setMappersPackage((String) pRecord.get(path_to_field_mappersPackage));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_servicesPackage), pRecord).isHidden()){
			pDataModel.setServicesPackage((String) pRecord.get(path_to_field_servicesPackage));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_rsPackage), pRecord).isHidden()){
			pDataModel.setRsPackage((String) pRecord.get(path_to_field_rsPackage));
		}
	}

	@Override
	protected void getValuesFromValueContext(final DataModel pDataModel, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_moduleName), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_moduleName)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setModuleName((String) pContext.getValue(pathToRecordRoot.add(path_to_field_moduleName)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_schemaLocation), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_schemaLocation)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setSchemaLocation((String) pContext.getValue(pathToRecordRoot.add(path_to_field_schemaLocation)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_beansSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_beansSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setBeansSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_beansSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_daoSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_daoSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setDaoSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_daoSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_dtoSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_dtoSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setDtoSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_dtoSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_mappersSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_mappersSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setMappersSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_mappersSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_servicesSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_servicesSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setServicesSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_servicesSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_rsSourceFolder), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_rsSourceFolder)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setRsSourceFolder((String) pContext.getValue(pathToRecordRoot.add(path_to_field_rsSourceFolder)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_beansPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_beansPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setBeansPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_beansPackage)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_daoPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_daoPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setDaoPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_daoPackage)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_dtoPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_dtoPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setDtoPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_dtoPackage)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_mappersPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_mappersPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setMappersPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_mappersPackage)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_servicesPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_servicesPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setServicesPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_servicesPackage)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_rsPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_rsPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataModel.setRsPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_rsPackage)));
		}
	}

	public static DataModelDAO getInstance() {
		return instance;
	}

	@Override
	public DataModel getInstanceOfBean(){
		DataModel instance = new DataModel();
		return instance;
	}

	@Override
	public DataModel getInstanceOfBean(final Adaptation pDataset){
		DataModel instance = new DataModel();
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(DataModel.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getDataModelTable();
	}
}