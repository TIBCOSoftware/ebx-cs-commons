/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.onwbp.adaptation.AdaptationValue;
import com.orchestranetworks.service.SessionPermissions;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.RestService;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import java.util.List;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/RestService in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class RestServiceDAO extends TableDAO<RestService> {

	private static final RestServiceDAO instance = new RestServiceDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_table = Path.parse("./table");
	public static final Path path_to_field_dataModel = Path.parse("./dataModel");
	public static final Path path_to_field_dto = Path.parse("./dto");
	public static final Path path_to_field_service = Path.parse("./service");
	public static final Path path_to_field_javaPackage = Path.parse("./javaPackage");
	public static final Path path_to_field_javaClassName = Path.parse("./javaClassName");
	public static final Path path_to_field_generationActive = Path.parse("./generationActive");
	public static final Path path_to_field_dataspace = Path.parse("./dataspace");
	public static final Path path_to_field_dataset = Path.parse("./dataset");
	public static final Path path_to_field_resourceName = Path.parse("./resourceName");
	public static final Path path_to_field_post = Path.parse("./post");
	public static final Path path_to_field_get = Path.parse("./get");
	public static final Path path_to_field_getList = Path.parse("./getList");
	public static final Path path_to_field_put = Path.parse("./put");
	public static final Path path_to_field_putList = Path.parse("./putList");
	public static final Path path_to_field_delete = Path.parse("./delete");
	public static final Path path_to_field_tag = Path.parse("./tag");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final RestService pRestService) throws EBXCommonsException {
		pContext.setValue(pRestService.getIdentifier(),path_to_field_identifier);
		if(pRestService.getTable() != null){
			pContext.setValue(ModelTableDAO.getInstance().getRecordPrimaryKey(pRestService.getTable()),path_to_field_table);
		}
		if(pRestService.doesInherit(path_to_field_dataModel)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_dataModel);
		}else{
			if(pRestService.getDataModel() != null){
				pContext.setValue(DataModelDAO.getInstance().getRecordPrimaryKey(pRestService.getDataModel()),path_to_field_dataModel);
			}
		}
		if(pRestService.getDto() != null){
			pContext.setValue(DataTransferObjectDAO.getInstance().getRecordPrimaryKey(pRestService.getDto()),path_to_field_dto);
		}
		if(pRestService.getService() != null){
			pContext.setValue(ServiceDAO.getInstance().getRecordPrimaryKey(pRestService.getService()),path_to_field_service);
		}
		if(pRestService.doesInherit(path_to_field_javaPackage)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_javaPackage);
		}else{
			pContext.setValue(pRestService.getJavaPackage(),path_to_field_javaPackage);
		}
		pContext.setValue(pRestService.getJavaClassName(),path_to_field_javaClassName);
		pContext.setValue(pRestService.getGenerationActive(),path_to_field_generationActive);
		pContext.setValue(pRestService.getDataspace(),path_to_field_dataspace);
		pContext.setValue(pRestService.getDataset(),path_to_field_dataset);
		pContext.setValue(pRestService.getResourceName(),path_to_field_resourceName);
		pContext.setValue(pRestService.getPost(),path_to_field_post);
		pContext.setValue(pRestService.getGet(),path_to_field_get);
		pContext.setValue(pRestService.getGetList(),path_to_field_getList);
		pContext.setValue(pRestService.getPut(),path_to_field_put);
		pContext.setValue(pRestService.getPutList(),path_to_field_putList);
		pContext.setValue(pRestService.getDelete(),path_to_field_delete);
		pContext.setValue(pRestService.getTag(),path_to_field_tag);
	}

	@Override
	protected void getValuesFromAdaptation(final RestService pRestService, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pRestService.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_dataModel))){
			pRestService.inherit(path_to_field_dataModel);
		}else{
			pRestService.overwrite(path_to_field_dataModel);
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaPackage), pRecord).isHidden()){
			pRestService.setJavaPackage((String) pRecord.get(path_to_field_javaPackage));
		}
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_javaPackage))){
			pRestService.inherit(path_to_field_javaPackage);
		}else{
			pRestService.overwrite(path_to_field_javaPackage);
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaClassName), pRecord).isHidden()){
			pRestService.setJavaClassName((String) pRecord.get(path_to_field_javaClassName));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_generationActive), pRecord).isHidden()){
			pRestService.setGenerationActive((Boolean) pRecord.get(path_to_field_generationActive));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_dataspace), pRecord).isHidden()){
			pRestService.setDataspace((String) pRecord.get(path_to_field_dataspace));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_dataset), pRecord).isHidden()){
			pRestService.setDataset((String) pRecord.get(path_to_field_dataset));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_resourceName), pRecord).isHidden()){
			pRestService.setResourceName((String) pRecord.get(path_to_field_resourceName));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_post), pRecord).isHidden()){
			pRestService.setPost((Boolean) pRecord.get(path_to_field_post));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_get), pRecord).isHidden()){
			pRestService.setGet((Boolean) pRecord.get(path_to_field_get));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_getList), pRecord).isHidden()){
			pRestService.setGetList((Boolean) pRecord.get(path_to_field_getList));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_put), pRecord).isHidden()){
			pRestService.setPut((Boolean) pRecord.get(path_to_field_put));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_putList), pRecord).isHidden()){
			pRestService.setPutList((Boolean) pRecord.get(path_to_field_putList));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_delete), pRecord).isHidden()){
			pRestService.setDelete((Boolean) pRecord.get(path_to_field_delete));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_tag), pRecord).isHidden()){
			pRestService.setTag((String) pRecord.get(path_to_field_tag));
		}
	}

	@Override
	protected void getValuesFromValueContext(final RestService pRestService, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_dataModel))){
				pRestService.inherit(path_to_field_dataModel);
			}else{
				pRestService.overwrite(path_to_field_dataModel);
			}
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaPackage)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setJavaPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaPackage)));
		}
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_javaPackage))){
				pRestService.inherit(path_to_field_javaPackage);
			}else{
				pRestService.overwrite(path_to_field_javaPackage);
			}
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaClassName), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaClassName)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setJavaClassName((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaClassName)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_generationActive), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_generationActive)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setGenerationActive((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_generationActive)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_dataspace), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_dataspace)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setDataspace((String) pContext.getValue(pathToRecordRoot.add(path_to_field_dataspace)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_dataset), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_dataset)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setDataset((String) pContext.getValue(pathToRecordRoot.add(path_to_field_dataset)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_resourceName), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_resourceName)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setResourceName((String) pContext.getValue(pathToRecordRoot.add(path_to_field_resourceName)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_post), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_post)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setPost((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_post)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_get), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_get)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setGet((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_get)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_getList), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_getList)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setGetList((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_getList)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_put), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_put)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setPut((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_put)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_putList), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_putList)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setPutList((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_putList)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_delete), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_delete)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setDelete((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_delete)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_tag), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_tag)), pContext.getAdaptationInstance()).isHidden()){
			pRestService.setTag((String) pContext.getValue(pathToRecordRoot.add(path_to_field_tag)));
		}
	}

	public static RestServiceDAO getInstance() {
		return instance;
	}

	@Override
	public RestService getInstanceOfBean(){
		RestService instance = new RestService();
		return instance;
	}

	@Override
	public RestService getInstanceOfBean(final Adaptation pDataset){
		RestService instance = new RestService();
		instance.inherit(path_to_field_dataModel);
		instance.inherit(path_to_field_javaPackage);
		instance.setGenerationActive(Boolean.TRUE);
		instance.setPost(Boolean.TRUE);
		instance.setGet(Boolean.TRUE);
		instance.setGetList(Boolean.TRUE);
		instance.setPut(Boolean.TRUE);
		instance.setPutList(Boolean.TRUE);
		instance.setDelete(Boolean.TRUE);
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(RestService.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getRestServiceTable();
	}
}