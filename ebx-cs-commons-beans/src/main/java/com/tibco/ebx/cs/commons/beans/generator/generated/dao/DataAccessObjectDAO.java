/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.onwbp.adaptation.AdaptationValue;
import com.orchestranetworks.service.SessionPermissions;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import java.util.List;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.DataAccessObject;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/DataAccessObject in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class DataAccessObjectDAO extends TableDAO<DataAccessObject> {

	private static final DataAccessObjectDAO instance = new DataAccessObjectDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_table = Path.parse("./table");
	public static final Path path_to_field_javaBean = Path.parse("./javaBean");
	public static final Path path_to_field_javaPackage = Path.parse("./javaPackage");
	public static final Path path_to_field_javaClassName = Path.parse("./javaClassName");
	public static final Path path_to_field_generationActive = Path.parse("./generationActive");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final DataAccessObject pDataAccessObject) throws EBXCommonsException {
		pContext.setValue(pDataAccessObject.getIdentifier(),path_to_field_identifier);
		if(pDataAccessObject.getTable() != null){
			pContext.setValue(ModelTableDAO.getInstance().getRecordPrimaryKey(pDataAccessObject.getTable()),path_to_field_table);
		}
		if(pDataAccessObject.getJavaBean() != null){
			pContext.setValue(JavaBeanDAO.getInstance().getRecordPrimaryKey(pDataAccessObject.getJavaBean()),path_to_field_javaBean);
		}
		if(pDataAccessObject.doesInherit(path_to_field_javaPackage)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_javaPackage);
		}else{
			pContext.setValue(pDataAccessObject.getJavaPackage(),path_to_field_javaPackage);
		}
		pContext.setValue(pDataAccessObject.getJavaClassName(),path_to_field_javaClassName);
		pContext.setValue(pDataAccessObject.getGenerationActive(),path_to_field_generationActive);
	}

	@Override
	protected void getValuesFromAdaptation(final DataAccessObject pDataAccessObject, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pDataAccessObject.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaPackage), pRecord).isHidden()){
			pDataAccessObject.setJavaPackage((String) pRecord.get(path_to_field_javaPackage));
		}
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_javaPackage))){
			pDataAccessObject.inherit(path_to_field_javaPackage);
		}else{
			pDataAccessObject.overwrite(path_to_field_javaPackage);
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaClassName), pRecord).isHidden()){
			pDataAccessObject.setJavaClassName((String) pRecord.get(path_to_field_javaClassName));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_generationActive), pRecord).isHidden()){
			pDataAccessObject.setGenerationActive((Boolean) pRecord.get(path_to_field_generationActive));
		}
	}

	@Override
	protected void getValuesFromValueContext(final DataAccessObject pDataAccessObject, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pDataAccessObject.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataAccessObject.setJavaPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaPackage)));
		}
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_javaPackage))){
				pDataAccessObject.inherit(path_to_field_javaPackage);
			}else{
				pDataAccessObject.overwrite(path_to_field_javaPackage);
			}
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaClassName), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaClassName)), pContext.getAdaptationInstance()).isHidden()){
			pDataAccessObject.setJavaClassName((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaClassName)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_generationActive), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_generationActive)), pContext.getAdaptationInstance()).isHidden()){
			pDataAccessObject.setGenerationActive((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_generationActive)));
		}
	}

	public static DataAccessObjectDAO getInstance() {
		return instance;
	}

	@Override
	public DataAccessObject getInstanceOfBean(){
		DataAccessObject instance = new DataAccessObject();
		return instance;
	}

	@Override
	public DataAccessObject getInstanceOfBean(final Adaptation pDataset){
		DataAccessObject instance = new DataAccessObject();
		instance.inherit(path_to_field_javaPackage);
		instance.setGenerationActive(Boolean.TRUE);
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(DataAccessObject.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getDataAccessObjectTable();
	}
}