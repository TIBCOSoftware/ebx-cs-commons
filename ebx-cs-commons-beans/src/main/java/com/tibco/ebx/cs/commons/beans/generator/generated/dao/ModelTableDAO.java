/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.Table;
import com.onwbp.adaptation.AdaptationValue;
import com.orchestranetworks.service.SessionPermissions;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import java.util.List;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/Table in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class ModelTableDAO extends TableDAO<Table> {

	private static final ModelTableDAO instance = new ModelTableDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_dataModel = Path.parse("./dataModel");
	public static final Path path_to_field_pathInSchema = Path.parse("./pathInSchema");
	public static final Path path_to_field_dao = Path.parse("./dao");
	public static final Path path_to_field_javaBean = Path.parse("./javaBean");
	public static final Path path_to_field_preferredDTO = Path.parse("./preferredDTO");
	public static final Path path_to_field_fields = Path.parse("./fields");
	public static final Path path_to_field_dtos = Path.parse("./dtos");
	public static final Path path_to_field_rsServices = Path.parse("./rsServices");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final Table pTable) throws EBXCommonsException {
		pContext.setValue(pTable.getIdentifier(),path_to_field_identifier);
		if(pTable.getDataModel() != null){
			pContext.setValue(DataModelDAO.getInstance().getRecordPrimaryKey(pTable.getDataModel()),path_to_field_dataModel);
		}
		pContext.setValue(pTable.getPathInSchema(),path_to_field_pathInSchema);
		if(pTable.getDao() != null){
			pContext.setValue(DataAccessObjectDAO.getInstance().getRecordPrimaryKey(pTable.getDao()),path_to_field_dao);
		}
		if(pTable.doesInherit(path_to_field_javaBean)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_javaBean);
		}else{
			if(pTable.getJavaBean() != null){
				pContext.setValue(JavaBeanDAO.getInstance().getRecordPrimaryKey(pTable.getJavaBean()),path_to_field_javaBean);
			}
		}
		if(pTable.getPreferredDTO() != null){
			pContext.setValue(DataTransferObjectDAO.getInstance().getRecordPrimaryKey(pTable.getPreferredDTO()),path_to_field_preferredDTO);
		}
	}

	@Override
	protected void getValuesFromAdaptation(final Table pTable, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pTable.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_pathInSchema), pRecord).isHidden()){
			pTable.setPathInSchema((String) pRecord.get(path_to_field_pathInSchema));
		}
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_javaBean))){
			pTable.inherit(path_to_field_javaBean);
		}else{
			pTable.overwrite(path_to_field_javaBean);
		}
	}

	@Override
	protected void getValuesFromValueContext(final Table pTable, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pTable.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_pathInSchema), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_pathInSchema)), pContext.getAdaptationInstance()).isHidden()){
			pTable.setPathInSchema((String) pContext.getValue(pathToRecordRoot.add(path_to_field_pathInSchema)));
		}
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_javaBean))){
				pTable.inherit(path_to_field_javaBean);
			}else{
				pTable.overwrite(path_to_field_javaBean);
			}
		}
	}

	public static ModelTableDAO getInstance() {
		return instance;
	}

	@Override
	public Table getInstanceOfBean(){
		Table instance = new Table();
		return instance;
	}

	@Override
	public Table getInstanceOfBean(final Adaptation pDataset){
		Table instance = new Table();
		instance.inherit(path_to_field_javaBean);
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(Table.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getTableTable();
	}
}