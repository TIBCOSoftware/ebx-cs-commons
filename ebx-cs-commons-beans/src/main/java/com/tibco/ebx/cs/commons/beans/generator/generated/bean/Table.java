/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.bean;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataAccessObjectDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataModelDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataTransferObjectDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.FieldDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.JavaBeanDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.ModelTableDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.RestServiceDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.TableBean;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;

/**
 * Java Bean of type TableBean automatically generated by service 'Generate Java
 * Accessers' of EBX Commons It represents node at path /root/Table in data
 * model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
 *
 * @author EBX Commons
 */
public class Table extends TableBean {

	private Integer identifier;
	private DataModel dataModel;
	private String pathInSchema;
	private DataAccessObject daobject;
	private JavaBean javaBean;
	private DataTransferObject preferredDTO;

	/**
	 * Default constructor
	 */
	public Table() {
	}

	public Integer getIdentifier() {
		return this.identifier;
	}

	public void setIdentifier(final Integer identifier) {
		this.identifier = identifier;
	}

	public DataModel getDataModel() throws EBXCommonsException {
		if (this.dataModel == null && isBoundToEBX()) {
			this.dataModel = DataModelDAO.getInstance().read(this, ModelTableDAO.path_to_field_dataModel).orElse(null);
		}
		return this.dataModel;
	}

	public void setDataModel(final DataModel dataModel) {
		this.dataModel = dataModel;
	}

	public String getPathInSchema() {
		return this.pathInSchema;
	}

	public void setPathInSchema(final String pathInSchema) {
		this.pathInSchema = pathInSchema;
	}

	public DataAccessObject getDaobject() throws EBXCommonsException {
		if (this.daobject == null && isBoundToEBX()) {
			this.daobject = DataAccessObjectDAO.getInstance().read(this, ModelTableDAO.path_to_field_dao).orElse(null);
		}
		return this.daobject;
	}

	public void setDaobject(final DataAccessObject dao) {
		this.daobject = dao;
	}

	public JavaBean getJavaBean() throws EBXCommonsException {
		if (this.javaBean == null && isBoundToEBX()) {
			this.javaBean = JavaBeanDAO.getInstance().read(this, ModelTableDAO.path_to_field_javaBean).orElse(null);
		}
		return this.javaBean;
	}

	public void setJavaBean(final JavaBean javaBean) {
		this.overwrite(this.getDAO().path_to_field_javaBean);
		this.javaBean = javaBean;
	}

	public DataTransferObject getPreferredDTO() throws EBXCommonsException {
		if (this.preferredDTO == null && isBoundToEBX()) {
			this.preferredDTO = DataTransferObjectDAO.getInstance().read(this, ModelTableDAO.path_to_field_preferredDTO)
					.orElse(null);
		}
		return this.preferredDTO;
	}

	public void setPreferredDTO(final DataTransferObject preferredDTO) {
		this.preferredDTO = preferredDTO;
	}

	public List<Field> getFields() {
		return FieldDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_fields);
	}

	public List<Field> getFields(final String predicate) {
		return FieldDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_fields, Optional.of(predicate));
	}

	public List<DataTransferObject> getDtos() {
		return DataTransferObjectDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_dtos);
	}

	public List<DataTransferObject> getDtos(final String predicate) {
		return DataTransferObjectDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_dtos,
				Optional.of(predicate));
	}

	public List<RestService> getRsServices() {
		return RestServiceDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_rsServices);
	}

	public List<RestService> getRsServices(final String predicate) {
		return RestServiceDAO.getInstance().readAll(this, ModelTableDAO.path_to_field_rsServices,
				Optional.of(predicate));
	}

	@Override
	protected ModelTableDAO getDAO() {
		return ModelTableDAO.getInstance();
	}

	@Override
	public int hashCode() {
		return Objects.hash(identifier, dataModel, pathInSchema, daobject, javaBean, preferredDTO);
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Table)) {
			return false;
		}
		Table other = (Table) obj;
		return Objects.equals(identifier, other.identifier) && Objects.equals(dataModel, other.dataModel)
				&& Objects.equals(pathInSchema, other.pathInSchema) && Objects.equals(daobject, other.daobject)
				&& Objects.equals(javaBean, other.javaBean) && Objects.equals(preferredDTO, other.preferredDTO);
	}
}