/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.bean;

import com.tibco.ebx.cs.commons.beans.generator.template.TableBean;
import java.util.Objects;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.RestServiceDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.ModelTableDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataTransferObjectDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.ServiceDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataModelDAO;

/**
* Java Bean of type TableBean automatically generated by service 'Generate Java Accessers' of EBX Commons
* It represents node at path /root/RestService in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class RestService extends TableBean {

	private Integer identifier;
	private Table table;
	private DataModel dataModel;
	private DataTransferObject dto;
	private Service service;
	private String javaPackage;
	private String javaClassName;
	private Boolean generationActive;
	private String dataspace;
	private String dataset;
	private String resourceName;
	private Boolean post;
	private Boolean get;
	private Boolean getList;
	private Boolean put;
	private Boolean putList;
	private Boolean delete;
	private String tag;

	/**
	* Default constructor
	*/
	public RestService(){
	}

	public Integer getIdentifier(){
		return this.identifier;
	}

	public void setIdentifier(final Integer identifier){
		this.identifier = identifier;
	}

	public Table getTable() throws EBXCommonsException {
		if(this.table == null && isBoundToEBX()){
			this.table = ModelTableDAO.getInstance().read(this, RestServiceDAO.path_to_field_table).orElse(null);
		}
		return this.table;
	}

	public void setTable(final Table table){
		this.table = table;
	}

	public DataModel getDataModel() throws EBXCommonsException {
		if(this.dataModel == null && isBoundToEBX()){
			this.dataModel = DataModelDAO.getInstance().read(this, RestServiceDAO.path_to_field_dataModel).orElse(null);
		}
		return this.dataModel;
	}

	public void setDataModel(final DataModel dataModel){
		this.overwrite(this.getDAO().path_to_field_dataModel);
		this.dataModel = dataModel;
	}

	public DataTransferObject getDto() throws EBXCommonsException {
		if(this.dto == null && isBoundToEBX()){
			this.dto = DataTransferObjectDAO.getInstance().read(this, RestServiceDAO.path_to_field_dto).orElse(null);
		}
		return this.dto;
	}

	public void setDto(final DataTransferObject dto){
		this.dto = dto;
	}

	public Service getService() throws EBXCommonsException {
		if(this.service == null && isBoundToEBX()){
			this.service = ServiceDAO.getInstance().read(this, RestServiceDAO.path_to_field_service).orElse(null);
		}
		return this.service;
	}

	public void setService(final Service service){
		this.service = service;
	}

	public String getJavaPackage(){
		return this.javaPackage;
	}

	public void setJavaPackage(final String javaPackage){
		this.overwrite(this.getDAO().path_to_field_javaPackage);
		this.javaPackage = javaPackage;
	}

	public String getJavaClassName(){
		return this.javaClassName;
	}

	public void setJavaClassName(final String javaClassName){
		this.javaClassName = javaClassName;
	}

	public Boolean getGenerationActive(){
		return this.generationActive;
	}

	public void setGenerationActive(final Boolean generationActive){
		this.generationActive = generationActive;
	}

	public String getDataspace(){
		return this.dataspace;
	}

	public void setDataspace(final String dataspace){
		this.dataspace = dataspace;
	}

	public String getDataset(){
		return this.dataset;
	}

	public void setDataset(final String dataset){
		this.dataset = dataset;
	}

	public String getResourceName(){
		return this.resourceName;
	}

	public void setResourceName(final String resourceName){
		this.resourceName = resourceName;
	}

	public Boolean getPost(){
		return this.post;
	}

	public void setPost(final Boolean post){
		this.post = post;
	}

	public Boolean getGet(){
		return this.get;
	}

	public void setGet(final Boolean get){
		this.get = get;
	}

	public Boolean getGetList(){
		return this.getList;
	}

	public void setGetList(final Boolean getList){
		this.getList = getList;
	}

	public Boolean getPut(){
		return this.put;
	}

	public void setPut(final Boolean put){
		this.put = put;
	}

	public Boolean getPutList(){
		return this.putList;
	}

	public void setPutList(final Boolean putList){
		this.putList = putList;
	}

	public Boolean getDelete(){
		return this.delete;
	}

	public void setDelete(final Boolean delete){
		this.delete = delete;
	}

	public String getTag(){
		return this.tag;
	}

	public void setTag(final String tag){
		this.tag = tag;
	}

	@Override
	protected RestServiceDAO getDAO() {
		return RestServiceDAO.getInstance();
	}

	@Override
	public int hashCode() {
		return Objects.hash(identifier,table,dataModel,dto,service,javaPackage,javaClassName,generationActive,dataspace,dataset,resourceName,post,get,getList,put,putList,delete,tag);
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof RestService)) {
			return false;
		}
		RestService other = ( RestService) obj;
		return Objects.equals(identifier, other.identifier)
			 && Objects.equals(table, other.table)
			 && Objects.equals(dataModel, other.dataModel)
			 && Objects.equals(dto, other.dto)
			 && Objects.equals(service, other.service)
			 && Objects.equals(javaPackage, other.javaPackage)
			 && Objects.equals(javaClassName, other.javaClassName)
			 && Objects.equals(generationActive, other.generationActive)
			 && Objects.equals(dataspace, other.dataspace)
			 && Objects.equals(dataset, other.dataset)
			 && Objects.equals(resourceName, other.resourceName)
			 && Objects.equals(post, other.post)
			 && Objects.equals(get, other.get)
			 && Objects.equals(getList, other.getList)
			 && Objects.equals(put, other.put)
			 && Objects.equals(putList, other.putList)
			 && Objects.equals(delete, other.delete)
			 && Objects.equals(tag, other.tag);
	}
}