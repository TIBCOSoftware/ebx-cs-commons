/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.bean;

import com.tibco.ebx.cs.commons.beans.generator.template.TableBean;
import java.util.Objects;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataTransferObjectDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.IgnoredFieldDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.FieldDAO;

/**
* Java Bean of type TableBean automatically generated by service 'Generate Java Accessers' of EBX Commons
* It represents node at path /root/IgnoredField in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class IgnoredField extends TableBean {

	private DataTransferObject dto;
	private Field field;

	/**
	* Default constructor
	*/
	public IgnoredField(){
	}

	public DataTransferObject getDto() throws EBXCommonsException {
		if(this.dto == null && isBoundToEBX()){
			this.dto = DataTransferObjectDAO.getInstance().read(this, IgnoredFieldDAO.path_to_field_dto).orElse(null);
		}
		return this.dto;
	}

	public void setDto(final DataTransferObject dto){
		this.dto = dto;
	}

	public Field getField() throws EBXCommonsException {
		if(this.field == null && isBoundToEBX()){
			this.field = FieldDAO.getInstance().read(this, IgnoredFieldDAO.path_to_field_field).orElse(null);
		}
		return this.field;
	}

	public void setField(final Field field){
		this.field = field;
	}

	@Override
	protected IgnoredFieldDAO getDAO() {
		return IgnoredFieldDAO.getInstance();
	}

	@Override
	public int hashCode() {
		return Objects.hash(dto,field);
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof IgnoredField)) {
			return false;
		}
		IgnoredField other = ( IgnoredField) obj;
		return Objects.equals(dto, other.dto)
			 && Objects.equals(field, other.field);
	}
}