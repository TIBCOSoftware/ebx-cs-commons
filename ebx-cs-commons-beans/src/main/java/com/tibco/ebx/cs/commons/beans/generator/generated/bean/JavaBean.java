/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.bean;

import com.tibco.ebx.cs.commons.beans.generator.template.TableBean;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.JavaBeanDAO;
import java.util.Objects;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.ModelTableDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataModelDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.FieldDAO;

/**
* Java Bean of type TableBean automatically generated by service 'Generate Java Accessers' of EBX Commons
* It represents node at path /root/JavaBean in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class JavaBean extends TableBean {

	private Integer identifier;
	private DataModel dataModel;
	private Table table;
	private Field field;
	private String type;
	private String javaPackage;
	private String javaClassName;
	private Boolean specific;
	private Boolean generationActive;

	/**
	* Default constructor
	*/
	public JavaBean(){
	}

	public Integer getIdentifier(){
		return this.identifier;
	}

	public void setIdentifier(final Integer identifier){
		this.identifier = identifier;
	}

	public DataModel getDataModel() throws EBXCommonsException {
		if(this.dataModel == null && isBoundToEBX()){
			this.dataModel = DataModelDAO.getInstance().read(this, JavaBeanDAO.path_to_field_dataModel).orElse(null);
		}
		return this.dataModel;
	}

	public void setDataModel(final DataModel dataModel){
		this.dataModel = dataModel;
	}

	public Table getTable() throws EBXCommonsException {
		if(this.table == null && isBoundToEBX()){
			this.table = ModelTableDAO.getInstance().read(this, JavaBeanDAO.path_to_field_table).orElse(null);
		}
		return this.table;
	}

	public void setTable(final Table table){
		this.table = table;
	}

	public Field getField() throws EBXCommonsException {
		if(this.field == null && isBoundToEBX()){
			this.field = FieldDAO.getInstance().read(this, JavaBeanDAO.path_to_field_field).orElse(null);
		}
		return this.field;
	}

	public void setField(final Field field){
		this.field = field;
	}

	public String getType(){
		return this.type;
	}

	public void setType(final String type){
		this.type = type;
	}

	public String getJavaPackage(){
		return this.javaPackage;
	}

	public void setJavaPackage(final String javaPackage){
		this.overwrite(this.getDAO().path_to_field_javaPackage);
		this.javaPackage = javaPackage;
	}

	public String getJavaClassName(){
		return this.javaClassName;
	}

	public void setJavaClassName(final String javaClassName){
		this.javaClassName = javaClassName;
	}

	public Boolean getSpecific(){
		return this.specific;
	}

	public void setSpecific(final Boolean specific){
		this.specific = specific;
	}

	public Boolean getGenerationActive(){
		return this.generationActive;
	}

	public void setGenerationActive(final Boolean generationActive){
		this.generationActive = generationActive;
	}

	@Override
	protected JavaBeanDAO getDAO() {
		return JavaBeanDAO.getInstance();
	}

	@Override
	public int hashCode() {
		return Objects.hash(identifier,dataModel,table,field,type,javaPackage,javaClassName,specific,generationActive);
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof JavaBean)) {
			return false;
		}
		JavaBean other = ( JavaBean) obj;
		return Objects.equals(identifier, other.identifier)
			 && Objects.equals(dataModel, other.dataModel)
			 && Objects.equals(table, other.table)
			 && Objects.equals(field, other.field)
			 && Objects.equals(type, other.type)
			 && Objects.equals(javaPackage, other.javaPackage)
			 && Objects.equals(javaClassName, other.javaClassName)
			 && Objects.equals(specific, other.specific)
			 && Objects.equals(generationActive, other.generationActive);
	}
}