/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.onwbp.adaptation.AdaptationValue;
import com.orchestranetworks.service.SessionPermissions;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.DataTransferObject;
import java.util.List;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/DataTransferObject in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class DataTransferObjectDAO extends TableDAO<DataTransferObject> {

	private static final DataTransferObjectDAO instance = new DataTransferObjectDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_table = Path.parse("./table");
	public static final Path path_to_field_field = Path.parse("./field");
	public static final Path path_to_field_javaPackage = Path.parse("./javaPackage");
	public static final Path path_to_field_javaClassName = Path.parse("./javaClassName");
	public static final Path path_to_field_generationActive = Path.parse("./generationActive");
	public static final Path path_to_field_mapper = Path.parse("./mapper");
	public static final Path path_to_field_ignoredFields = Path.parse("./ignoredFields");
	public static final Path path_to_field_includedRelations = Path.parse("./includedRelations");
	public static final Path path_to_field_services = Path.parse("./services");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final DataTransferObject pDataTransferObject) throws EBXCommonsException {
		pContext.setValue(pDataTransferObject.getIdentifier(),path_to_field_identifier);
		if(pDataTransferObject.getTable() != null){
			pContext.setValue(ModelTableDAO.getInstance().getRecordPrimaryKey(pDataTransferObject.getTable()),path_to_field_table);
		}
		if(pDataTransferObject.getField() != null){
			pContext.setValue(FieldDAO.getInstance().getRecordPrimaryKey(pDataTransferObject.getField()),path_to_field_field);
		}
		if(pDataTransferObject.doesInherit(path_to_field_javaPackage)){
			pContext.setValue(AdaptationValue.INHERIT_VALUE,path_to_field_javaPackage);
		}else{
			pContext.setValue(pDataTransferObject.getJavaPackage(),path_to_field_javaPackage);
		}
		pContext.setValue(pDataTransferObject.getJavaClassName(),path_to_field_javaClassName);
		pContext.setValue(pDataTransferObject.getGenerationActive(),path_to_field_generationActive);
		if(pDataTransferObject.getMapper() != null){
			pContext.setValue(MapperDAO.getInstance().getRecordPrimaryKey(pDataTransferObject.getMapper()),path_to_field_mapper);
		}
	}

	@Override
	protected void getValuesFromAdaptation(final DataTransferObject pDataTransferObject, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pDataTransferObject.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaPackage), pRecord).isHidden()){
			pDataTransferObject.setJavaPackage((String) pRecord.get(path_to_field_javaPackage));
		}
		if(AdaptationValue.INHERIT_VALUE.equals(pRecord.getValueWithoutResolution(path_to_field_javaPackage))){
			pDataTransferObject.inherit(path_to_field_javaPackage);
		}else{
			pDataTransferObject.overwrite(path_to_field_javaPackage);
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_javaClassName), pRecord).isHidden()){
			pDataTransferObject.setJavaClassName((String) pRecord.get(path_to_field_javaClassName));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_generationActive), pRecord).isHidden()){
			pDataTransferObject.setGenerationActive((Boolean) pRecord.get(path_to_field_generationActive));
		}
	}

	@Override
	protected void getValuesFromValueContext(final DataTransferObject pDataTransferObject, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pDataTransferObject.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaPackage), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaPackage)), pContext.getAdaptationInstance()).isHidden()){
			pDataTransferObject.setJavaPackage((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaPackage)));
		}
		if(record.isPresent()){
			if(AdaptationValue.INHERIT_VALUE.equals(record.get().getValueWithoutResolution(path_to_field_javaPackage))){
				pDataTransferObject.inherit(path_to_field_javaPackage);
			}else{
				pDataTransferObject.overwrite(path_to_field_javaPackage);
			}
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_javaClassName), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_javaClassName)), pContext.getAdaptationInstance()).isHidden()){
			pDataTransferObject.setJavaClassName((String) pContext.getValue(pathToRecordRoot.add(path_to_field_javaClassName)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_generationActive), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_generationActive)), pContext.getAdaptationInstance()).isHidden()){
			pDataTransferObject.setGenerationActive((Boolean) pContext.getValue(pathToRecordRoot.add(path_to_field_generationActive)));
		}
	}

	public static DataTransferObjectDAO getInstance() {
		return instance;
	}

	@Override
	public DataTransferObject getInstanceOfBean(){
		DataTransferObject instance = new DataTransferObject();
		return instance;
	}

	@Override
	public DataTransferObject getInstanceOfBean(final Adaptation pDataset){
		DataTransferObject instance = new DataTransferObject();
		instance.inherit(path_to_field_javaPackage);
		instance.setGenerationActive(Boolean.TRUE);
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(DataTransferObject.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getDataTransferObjectTable();
	}
}