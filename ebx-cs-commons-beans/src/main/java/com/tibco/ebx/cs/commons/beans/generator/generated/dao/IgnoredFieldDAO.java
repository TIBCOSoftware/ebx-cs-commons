/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.DataTransferObject;
import java.util.List;
import com.orchestranetworks.service.SessionPermissions;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.Field;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.IgnoredField;
import java.util.Optional;
import java.util.ArrayList;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/IgnoredField in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class IgnoredFieldDAO extends TableDAO<IgnoredField> {

	private static final IgnoredFieldDAO instance = new IgnoredFieldDAO();

	public static final Path path_to_field_dto = Path.parse("./dto");
	public static final Path path_to_field_field = Path.parse("./field");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final IgnoredField pIgnoredField) throws EBXCommonsException {
		if(pIgnoredField.getDto() != null){
			pContext.setValue(DataTransferObjectDAO.getInstance().getRecordPrimaryKey(pIgnoredField.getDto()),path_to_field_dto);
		}
		if(pIgnoredField.getField() != null){
			pContext.setValue(FieldDAO.getInstance().getRecordPrimaryKey(pIgnoredField.getField()),path_to_field_field);
		}
	}

	@Override
	protected void getValuesFromAdaptation(final IgnoredField pIgnoredField, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
	}

	@Override
	protected void getValuesFromValueContext(final IgnoredField pIgnoredField, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
	}

	public static IgnoredFieldDAO getInstance() {
		return instance;
	}

	@Override
	public IgnoredField getInstanceOfBean(){
		IgnoredField instance = new IgnoredField();
		return instance;
	}

	@Override
	public IgnoredField getInstanceOfBean(final Adaptation pDataset){
		IgnoredField instance = new IgnoredField();
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getDto","getField" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(IgnoredField.class.getMethod("setDto", DataTransferObject.class), Optional.of(DataTransferObject.class)));
			setters.add(new PrimaryKeySetter(IgnoredField.class.getMethod("setField", Field.class), Optional.of(Field.class)));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getIgnoredFieldTable();
	}
}