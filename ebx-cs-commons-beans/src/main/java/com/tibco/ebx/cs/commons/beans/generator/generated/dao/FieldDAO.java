/* Copyright Â© 2024. Cloud Software Group, Inc. This file is subject to the license terms contained in the license file that is distributed with this file. */
/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.dao;

import com.onwbp.adaptation.Adaptation;
import com.orchestranetworks.schema.Path;
import com.orchestranetworks.service.ValueContextForUpdate;
import com.orchestranetworks.instance.ValueContext;
import com.tibco.ebx.cs.commons.beans.generator.template.TableDAO;
import com.tibco.ebx.cs.commons.beans.generator.template.PrimaryKeySetter;
import com.tibco.ebx.cs.commons.lib.utils.SchemaUtils;
import com.orchestranetworks.service.SessionPermissions;
import java.util.ArrayList;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import java.util.List;
import com.tibco.ebx.cs.commons.beans.generator.generated.bean.Field;
import com.onwbp.adaptation.AdaptationTable;
import com.tibco.ebx.cs.commons.lib.utils.AdaptationUtils;
import com.tibco.ebx.cs.commons.beans.generator.exception.BeansTechnicalException;
import java.util.Optional;

/**
* Data access object (DAO) automatically generated by service 'Generate Java Accessers' of EBX Commons
* It aims to access records of table at path /root/Field in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class FieldDAO extends TableDAO<Field> {

	private static final FieldDAO instance = new FieldDAO();

	public static final Path path_to_field_identifier = Path.parse("./identifier");
	public static final Path path_to_field_dataModel = Path.parse("./dataModel");
	public static final Path path_to_field_table = Path.parse("./table");
	public static final Path path_to_field_javaBean = Path.parse("./javaBean");
	public static final Path path_to_field_path = Path.parse("./path");
	public static final Path path_to_field_type = Path.parse("./type");
	public static final Path path_to_field_dtos = Path.parse("./dtos");

	@Override
	protected void setValuesForUpdate(final ValueContextForUpdate pContext, final Field pField) throws EBXCommonsException {
		pContext.setValue(pField.getIdentifier(),path_to_field_identifier);
		if(pField.getDataModel() != null){
			pContext.setValue(DataModelDAO.getInstance().getRecordPrimaryKey(pField.getDataModel()),path_to_field_dataModel);
		}
		if(pField.getTable() != null){
			pContext.setValue(ModelTableDAO.getInstance().getRecordPrimaryKey(pField.getTable()),path_to_field_table);
		}
		if(pField.getJavaBean() != null){
			pContext.setValue(JavaBeanDAO.getInstance().getRecordPrimaryKey(pField.getJavaBean()),path_to_field_javaBean);
		}
		pContext.setValue(pField.getPath(),path_to_field_path);
		pContext.setValue(pField.getType(),path_to_field_type);
	}

	@Override
	protected void getValuesFromAdaptation(final Field pField, final Adaptation pRecord, final Optional<SessionPermissions> pPermissions) {
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_identifier), pRecord).isHidden()){
			pField.setIdentifier((Integer) pRecord.get(path_to_field_identifier));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_path), pRecord).isHidden()){
			pField.setPath((String) pRecord.get(path_to_field_path));
		}
		if(!pPermissions.isPresent() || !pPermissions.get().getNodeAccessPermission(pRecord.getSchemaNode().getNode(path_to_field_type), pRecord).isHidden()){
			pField.setType((String) pRecord.get(path_to_field_type));
		}
	}

	@Override
	protected void getValuesFromValueContext(final Field pField, final ValueContext pContext, Optional<SessionPermissions> pPermissions) {
		Path pathToRecordRoot = SchemaUtils.getPathToRecordRoot(pContext.getNode());
		Optional<Adaptation> record = AdaptationUtils.getRecordForValueContext(pContext);
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_identifier), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_identifier)), pContext.getAdaptationInstance()).isHidden()){
			pField.setIdentifier((Integer) pContext.getValue(pathToRecordRoot.add(path_to_field_identifier)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_path), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_path)), pContext.getAdaptationInstance()).isHidden()){
			pField.setPath((String) pContext.getValue(pathToRecordRoot.add(path_to_field_path)));
		}
		if(!pPermissions.isPresent() || record.isPresent() && !pPermissions.get().getNodeAccessPermission(record.get().getSchemaNode().getNode(path_to_field_type), record.get()).isHidden() || !pPermissions.get().getNodeAccessPermission(pContext.getNode(pathToRecordRoot.add(path_to_field_type)), pContext.getAdaptationInstance()).isHidden()){
			pField.setType((String) pContext.getValue(pathToRecordRoot.add(path_to_field_type)));
		}
	}

	public static FieldDAO getInstance() {
		return instance;
	}

	@Override
	public Field getInstanceOfBean(){
		Field instance = new Field();
		return instance;
	}

	@Override
	public Field getInstanceOfBean(final Adaptation pDataset){
		Field instance = new Field();
		return instance;
	}

	@Override
	protected String[] getPrimaryKeysGetters() {
		return new String[] { "getIdentifier" };
	}

	@Override
	protected List<PrimaryKeySetter> getPrimaryKeysSetters() throws BeansTechnicalException {
		List<PrimaryKeySetter> setters = new ArrayList<>();
		try {
			setters.add(new PrimaryKeySetter(Field.class.getMethod("setIdentifier", Integer.class), Optional.empty()));
		} catch (NoSuchMethodException ex) {
			throw new BeansTechnicalException(ex);
		}
		return setters;
	}

	@Override
	protected DataModelsDAO getDatasetDAO(final Adaptation pDataset) {
		return new DataModelsDAO(pDataset);
	}

	@Override
	protected AdaptationTable getAdaptationTable(final Adaptation pDataset) {
		return this.getDatasetDAO(pDataset).getFieldTable();
	}
}