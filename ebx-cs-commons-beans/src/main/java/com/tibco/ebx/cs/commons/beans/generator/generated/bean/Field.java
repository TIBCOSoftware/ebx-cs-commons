/**
* This class has been automatically generated by ebx-cs-commons 2.0.12-SNAPSHOT
*/
package com.tibco.ebx.cs.commons.beans.generator.generated.bean;

import com.tibco.ebx.cs.commons.beans.generator.template.TableBean;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.ModelTableDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataTransferObjectDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.FieldDAO;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.JavaBeanDAO;
import java.util.Objects;
import com.tibco.ebx.cs.commons.lib.exception.EBXCommonsException;
import java.util.List;
import com.tibco.ebx.cs.commons.beans.generator.generated.dao.DataModelDAO;
import java.util.Optional;

/**
* Java Bean of type TableBean automatically generated by service 'Generate Java Accessers' of EBX Commons
* It represents node at path /root/Field in data model urn:ebx:module:ebx-cs-commons:/WEB-INF/ebx/schemas/DataModels.xsd.
*
* @author EBX Commons
*/
public class Field extends TableBean {

	private Integer identifier;
	private DataModel dataModel;
	private Table table;
	private JavaBean javaBean;
	private String path;
	private String type;

	/**
	* Default constructor
	*/
	public Field(){
	}

	public Integer getIdentifier(){
		return this.identifier;
	}

	public void setIdentifier(final Integer identifier){
		this.identifier = identifier;
	}

	public DataModel getDataModel() throws EBXCommonsException {
		if(this.dataModel == null && isBoundToEBX()){
			this.dataModel = DataModelDAO.getInstance().read(this, FieldDAO.path_to_field_dataModel).orElse(null);
		}
		return this.dataModel;
	}

	public void setDataModel(final DataModel dataModel){
		this.dataModel = dataModel;
	}

	public Table getTable() throws EBXCommonsException {
		if(this.table == null && isBoundToEBX()){
			this.table = ModelTableDAO.getInstance().read(this, FieldDAO.path_to_field_table).orElse(null);
		}
		return this.table;
	}

	public void setTable(final Table table){
		this.table = table;
	}

	public JavaBean getJavaBean() throws EBXCommonsException {
		if(this.javaBean == null && isBoundToEBX()){
			this.javaBean = JavaBeanDAO.getInstance().read(this, FieldDAO.path_to_field_javaBean).orElse(null);
		}
		return this.javaBean;
	}

	public void setJavaBean(final JavaBean javaBean){
		this.javaBean = javaBean;
	}

	public String getPath(){
		return this.path;
	}

	public void setPath(final String path){
		this.path = path;
	}

	public String getType(){
		return this.type;
	}

	public void setType(final String type){
		this.type = type;
	}

	public List<DataTransferObject> getDtos(){
		return DataTransferObjectDAO.getInstance().readAll(this, FieldDAO.path_to_field_dtos);
	}

	public List<DataTransferObject> getDtos(final String predicate) {
		return DataTransferObjectDAO.getInstance().readAll(this, FieldDAO.path_to_field_dtos, Optional.of(predicate));
	}

	@Override
	protected FieldDAO getDAO() {
		return FieldDAO.getInstance();
	}

	@Override
	public int hashCode() {
		return Objects.hash(identifier,dataModel,table,javaBean,path,type);
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Field)) {
			return false;
		}
		Field other = ( Field) obj;
		return Objects.equals(identifier, other.identifier)
			 && Objects.equals(dataModel, other.dataModel)
			 && Objects.equals(table, other.table)
			 && Objects.equals(javaBean, other.javaBean)
			 && Objects.equals(path, other.path)
			 && Objects.equals(type, other.type);
	}
}